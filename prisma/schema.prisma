generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email      String  @unique
  password   String
  username   String
  restoreKey String? @unique

  scores    Score[]
  winsCount WinCount[]

  quizes          Quiz[]
  quizesRatings   QuizRating[]
  favouriteQuizes FavoritesQuizesOnUser[]
}

model Token {
  id Int @id @default(autoincrement())

  userId Int
  token  String @db.Text
}

model Game {
  name      String     @id
  scores    Score[]
  winsCount WinCount[]
}

model Score {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  value Int
  level String?

  Game     Game   @relation(fields: [gameName], references: [name], onDelete: Cascade)
  gameName String

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model WinCount {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  value Int
  level String?

  Game     Game   @relation(fields: [gameName], references: [name], onDelete: Cascade)
  gameName String

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([gameName, userId, level], name: "uniq_combination")
}

model Quiz {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  name      String         @default("Untitled")
  questions QuizQuestion[]
  rating    QuizRating[]

  favouritedBy FavoritesQuizesOnUser[]

  User   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?
}

model QuizQuestion {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  question         String
  correctAnswer    String
  incorrectAnswers String[]

  Quiz   Quiz?   @relation(fields: [quizId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quizId String?
}

model QuizRating {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  rating Int

  Quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId String

  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([userId, quizId], name: "uniq_combination")
}

model FavoritesQuizesOnUser {
  User   User   @relation(fields: [userId], references: [id])
  userId Int
  Quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId String

  @@id([userId, quizId])
}
